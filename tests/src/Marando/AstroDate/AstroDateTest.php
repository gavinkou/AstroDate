<?php

namespace Marando\AstroDate;

use \Marando\Units\Angle;
use \Marando\Units\Time;
use \PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-17 at 02:10:56.
 */
class AstroDateTest extends PHPUnit_Framework_TestCase {

  /**
   * @covers Marando\AstroDate\AstroDate::jd
   */
  public function testJd() {
    $dates = [
        // Date                  // JD
        ['2000-Jan-01 00:00:00', 2451544.500000],
        ['2100-Oct-12 18:20:04', 2488354.263935],
        ['2089-Nov-08 21:14:18', 2484364.3849301],
    ];

    foreach ($dates as $d) {
      $fromJD = AstroDate::jd($d[1]);
      $toJd   = AstroDate::parse($d[0]);
      $this->assertEquals($toJd->toJD(), $fromJD->toJD(), "from JD $d[0]", 1e-4);
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::mjd
   */
  public function testMjd() {
    $dates = [
        // Date                  // JD
        ['2000-Jan-01 00:00:00', 2451544.500000 - 2400000.5],
        ['2100-Oct-12 18:20:04', 2488354.263935 - 2400000.5],
        ['2089-Nov-08 21:14:18', 2484364.3849301 - 2400000.5],
    ];

    foreach ($dates as $d) {
      $fromMJD = AstroDate::mjd($d[1]);
      $toMJD   = AstroDate::parse($d[0]);
      $this->assertEquals($toMJD->toMJD(), $fromMJD->toMJD(), "from MJD $d[0]",
              1e-4);
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::now
   */
  public function testNow() {
    $d1 = AstroDate::now();
    $d2 = AstroDate::now();

    $this->assertGreaterThanOrEqual($d1->toJD(), $d2->toJD());
  }

  /**
   * @covers Marando\AstroDate\AstroDate::parse
   * @todo   Implement testParse().
   */
  public function testParse() {
    $dates = [
        ['2015-Nov-16 05:07:07.3 PM UTC', 2015, 11, 16, 17, 7, 7, .3, 'UTC'],
        ['-300-Nov-16 05:07:07.3 PM UTC', -300, 11, 16, 17, 7, 7, .3, 'UTC'],
        ['Tue, 2015-Nov-16 05:07:07.3 PM UTC', 2015, 11, 16, 17, 7, 7, .3, 'UTC'],
        ['2015-Nov-16 05:07:07.3 PM TT', 2015, 11, 16, 17, 7, 7, .3, 'TT'],
        ['2015-Nov-16 05:07:07.3 TT', 2015, 11, 16, 5, 7, 7, .3, 'TT'],
        ['2015-Nov-16 05:07:07 TT', 2015, 11, 16, 5, 7, 7, 0, 'TT'],
        ['2015-Nov-16 05:07:07', 2015, 11, 16, 5, 7, 7, 0, 'UTC'],
        ['2015-Nov-16 05:07', 2015, 11, 16, 5, 7, 0, 0, 'UTC'],
        ['2015-Nov-16 05:07 TT', 2015, 11, 16, 5, 7, 0, 0, 'TT'],
        ['2015-Nov-16 TT', 2015, 11, 16, 0, 0, 0, 0, 'TT'],
        ['20155-Nov-16', 20155, 11, 16, 0, 0, 0, 0, 'UTC'],
        ['2015-11-16', 2015, 11, 16, 0, 0, 0, 0, 'UTC'],
        ['2015/11/16', 2015, 11, 16, 0, 0, 0, 0, 'UTC'],
        ['2015 11 16', 2015, 11, 16, 0, 0, 0, 0, 'UTC'],
        // // //
        ['2010 Jan. 4.255 TT', 2010, 1, 4, 6, 7, 12, 0, 'TT'],
        ['2010 Jan. 4.255', 2010, 1, 4, 6, 7, 12, 0, 'UTC'],
        ['-2010 January 4.255', -2010, 1, 4, 6, 7, 12, 0, 'UTC'],
        ['2010/Jan/4.255', 2010, 1, 4, 6, 7, 12, 0, 'UTC'],
        ['2010-Jan-4.255', 2010, 1, 4, 6, 7, 12, 0, 'UTC'],
        // // //
        ['2015-Nov-19 06:00 PM EST', 2015, 11, 19, 18, 0, 0, 0, 'EST'],
            //['Jan 10, 2015 3:45:10.2 PM EST', 2015, 1, 10, 3, 45, 10, .2, 'EST'],
    ];
    foreach ($dates as $d) {
     echo "\n". $date = AstroDate::parse($d[0]);
      $this->assertEquals($d[1], $date->year, $d[0] . ' year');
      $this->assertEquals($d[2], $date->month, $d[0] . ' month');
      $this->assertEquals($d[3], $date->day, $d[0] . ' day');
      $this->assertEquals($d[4], $date->hour, $d[0] . ' hours');
      $this->assertEquals($d[5], $date->min, $d[0] . ' min');
      $this->assertEquals($d[6], $date->sec, $d[0] . ' sec');
      $this->assertEquals($d[7], (float)"0.$date->micro", $d[0] . ' micro');

      $tzts = $date->timescale->abr == $d[8] || $date->timezone->name == $d[8];
      $this->assertTrue($tzts, $d[0] . ' timezone');
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::setDate
   */
  public function testSetDate() {
    $tests = [
        [2050, 11, 4],
        [10, 9, 14],
        [1960, 2, 23],
        [-560, 1, 7],
        [1978, 7, 19],
        [3005, 12, 31],
    ];

    $dt = AstroDate::now();
    foreach ($tests as $t) {
      $y = $t[0];
      $m = $t[1];
      $d = $t[2];

      $dt->setDate($y, $m, $d);

      $this->assertEquals($y, $dt->year);
      $this->assertEquals($m, $dt->month);
      $this->assertEquals($d, $dt->day);
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::setTime
   */
  public function testSetTime() {
    $tests = [
        [12, 45, 13.54],
        [1, 46, 16.234],
        [19, 20, 12],
        [4, 12, 15.45],
        [22, 1, 11.124],
        [23, 58, 24.38571],
    ];

    $dt = AstroDate::now();
    foreach ($tests as $t) {
      $h = $t[0];
      $m = $t[1];
      $s = $t[2];

      $dt->setTime($h, $m, $s);

      $this->assertEquals($h, $dt->hour);
      $this->assertEquals($m, $dt->min);
      $this->assertEquals((int)$s, $dt->sec);
      $this->assertEquals($s - floor($s), (float)"0.$dt->micro");
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::setDateTime
   */
  public function testSetDateTime() {
    $tests = [
        [2050, 11, 4, 12, 45, 13.54],
        [10, 9, 14, 1, 46, 16.234],
        [1960, 2, 23, 19, 20, 12],
        [-560, 1, 7, 4, 12, 15.45],
        [1978, 7, 19, 22, 1, 11.124],
        [3005, 12, 31, 23, 58, 24.38571],
    ];

    $dt = AstroDate::now();
    foreach ($tests as $t) {
      $y = $t[0];
      $m = $t[1];
      $d = $t[2];
      $h = $t[3];
      $i = $t[4];
      $s = $t[5];

      $dt->setDateTime($y, $m, $d, $h, $i, $s);

      $this->assertEquals($y, $dt->year);
      $this->assertEquals($m, $dt->month);
      $this->assertEquals($d, $dt->day);
      $this->assertEquals($h, $dt->hour);
      $this->assertEquals($i, $dt->min);
      $this->assertEquals((int)$s, $dt->sec);
      $this->assertEquals($s - floor($s), (float)"0.$dt->micro");
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::setTimezone
   */
  public function testSetTimezone() {
    $tests = [
        'EST'      => 19,
        'UTC'      => 0,
        'GMT'      => 0,
        'MST'      => 17,
        'UT-11'    => 13,
        'UT+0430'  => 4,
        'UT+06:30' => 6,
    ];

    $dt = AstroDate::jd(AstroDate::UJD);
    foreach ($tests as $tz => $hour) {
      $dt->setTimezone($tz);
      $this->assertEquals($hour, $dt->setTimezone($tz)->hour, $tz);
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::toJD
   */
  public function testToJD() {
    $dates = [
        // Date                  // JD
        ['2000-Jan-01 00:00:00', 2451544.500000],
        ['2100-Oct-12 18:20:04', 2488354.263935],
        ['2089-Nov-08 21:14:18', 2484364.3849301],
    ];

    foreach ($dates as $d) {
      $fromJD = AstroDate::jd($d[1]);
      $toJd   = AstroDate::parse($d[0]);
      $this->assertEquals($fromJD->toJD(), $toJd->toJD(), "to JD $d[0]", 1e-4);
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::toMJD
   */
  public function testToMJD() {
    $dates = [
        // Date                  // JD
        ['2000-Jan-01 00:00:00', 2451544.500000 - 2400000.5],
        ['2100-Oct-12 18:20:04', 2488354.263935 - 2400000.5],
        ['2089-Nov-08 21:14:18', 2484364.3849301 - 2400000.5],
    ];

    foreach ($dates as $d) {
      $fromMJD = AstroDate::mjd($d[1]);
      $toMJD   = AstroDate::parse($d[0]);
      $this->assertEquals($fromMJD->toMJD(), $toMJD->toMJD(), "to MJD $d[0]",
              1e-4);
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::add
   */
  public function testAdd() {
    $tests = [
        // Original     2015, 11, 1, 12, 50, 10
        [Time::min(10), 2015, 11, 1, 13, 0, 10],
        [Time::sec(33), 2015, 11, 1, 12, 50, 43],
        [Time::days(3), 2015, 11, 4, 12, 50, 10],
        [Time::days(15), 2015, 11, 16, 12, 50, 10],
        [Time::days(365), 2016, 10, 31, 12, 50, 10],
        [Time::hours(13), 2015, 11, 2, 1, 50, 10],
    ];

    foreach ($tests as $t) {
      $time = $t[0];
      $y    = $t[1];
      $m    = $t[2];
      $d    = $t[3];
      $h    = $t[4];
      $i    = $t[5];
      $s    = $t[6];

      $dt0 = new AstroDate(2015, 11, 1, 12, 50, 10);
      $dt  = $dt0->copy()->add($time);

      $this->assertEquals($y, $dt->year, $t[0] . ' y');
      $this->assertEquals($m, $dt->month, $t[0] . ' m');
      $this->assertEquals($d, $dt->day, $t[0] . ' d');
      $this->assertEquals($h, $dt->hour, $t[0] . ' h');
      $this->assertEquals($i, $dt->min, $t[0] . ' i');
      $this->assertEquals($s, $dt->sec, $t[0] . ' s');
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::sub
   */
  public function testSub() {
    $tests = [
        // Original     2015, 11, 1, 12, 50, 10
        [Time::min(10), 2015, 11, 1, 12, 40, 10],
        [Time::sec(33), 2015, 11, 1, 12, 49, 37],
        [Time::days(3), 2015, 10, 29, 12, 50, 10],
        [Time::days(15), 2015, 10, 17, 12, 50, 10],
        [Time::days(365), 2014, 11, 1, 12, 50, 10],
        [Time::hours(13), 2015, 10, 31, 23, 50, 10],
    ];

    foreach ($tests as $t) {
      $time = $t[0];
      $y    = $t[1];
      $m    = $t[2];
      $d    = $t[3];
      $h    = $t[4];
      $i    = $t[5];
      $s    = $t[6];

      $dt0 = new AstroDate(2015, 11, 1, 12, 50, 10);
      $dt  = $dt0->copy()->sub($time);

      $this->assertEquals($y, $dt->year, $t[0] . ' y');
      $this->assertEquals($m, $dt->month, $t[0] . ' m');
      $this->assertEquals($d, $dt->day, $t[0] . ' d');
      $this->assertEquals($h, $dt->hour, $t[0] . ' h');
      $this->assertEquals($i, $dt->min, $t[0] . ' i');
      $this->assertEquals($s, $dt->sec, $t[0] . ' s');
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::toUTC
   */
  public function testToUTC() {
    $tests = [
        AstroDate::jd(2456658.5004050927, TimeScale::TAI()),
        AstroDate::jd(2456658.5007775929, TimeScale::TT()),
        AstroDate::jd(2456658.500777592, TimeScale::TDB())
    ];

    foreach ($tests as $t) {
      $this->assertEquals(2456658.5, $t->toUTC()->toJD(), $t->timescale, 1e-4);
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::toTAI
   */
  public function testToTAI() {
    $tt  = AstroDate::jd(2453750.5 + 0.892482639, TimeScale::TT());
    $tai = AstroDate::jd(2453750.5 + 0.892110139, TimeScale::TAI());
    $this->assertEquals($tai->toJD(), $tt->toTAI()->toJD(), 'TT -> TAI', 1e-5);

    $ut1 = AstroDate::jd(2453750.5 + 0.892104561, TimeScale::UT1());
    $tai = AstroDate::jd(2453750.5 + 0.892110139, TimeScale::TAI());
    $this->assertEquals($tai->toJD(), $ut1->toTAI()->toJD(), 'UT1 -> TAI', 1e-3);

    $utc = AstroDate::jd(2453750.5 + 0.892100694, TimeScale::UTC());
    $tai = AstroDate::jd(2453750.5 + 0.892110139, TimeScale::TAI());
    $this->assertEquals($tai->toJD(), $utc->toTAI()->toJD(), 'UTC -> TAI', 1e-3);
  }

  /**
   * @covers Marando\AstroDate\AstroDate::toTT
   */
  public function testToTT() {
    $tai = AstroDate::jd(2453750.5 + 0.892482639, TimeScale::TAI());
    $tt  = AstroDate::jd(2453750.5 + 0.892855139, TimeScale::TT());
    $this->assertEquals($tt->toJD(), $tai->toTT()->toJD(), 'TAI -> TT', 1e-5);

    $tdb = AstroDate::jd(2453750.5 + 0.892855137, TimeScale::TDB());
    $tt  = AstroDate::jd(2453750.5 + 0.892855139, TimeScale::TT());
    $this->assertEquals($tt->toJD(), $tdb->toTT()->toJD(), 'TDB -> TT', 1e-8);

    $ut1 = AstroDate::jd(2453750.5 + 0.892104561, TimeScale::UT1());
    $tt  = AstroDate::jd(2453750.5 + 0.892855139, TimeScale::TT());
    $this->assertEquals($tt->toJD(), $ut1->toTT()->toJD(), 'UT1 -> TT', 1e-5);
  }

  /**
   * @covers Marando\AstroDate\AstroDate::toUT1
   */
  public function testToUT1() {
    $tai = AstroDate::jd(2453750.5 + 0.892482639, TimeScale::TAI());
    $ut1 = AstroDate::jd(2453750.5 + 0.8921045614537037037, TimeScale::UT1());
    $this->assertEquals($ut1->toJD(), $tai->toUT1()->toJD(), 'TAI -> UT1', 1e-5);

    $tt  = AstroDate::jd(2453750.5 + 0.892855139, TimeScale::TT());
    $ut1 = AstroDate::jd(2453750.5 + 0.8921045614537037037, TimeScale::UT1());
    $this->assertEquals($ut1->toJD(), $tt->toUT1()->toJD(), 'TT -> UT1', 1e-5);

    $utc = AstroDate::jd(2453750.5 + 0.892100694, TimeScale::UTC());
    $ut1 = AstroDate::jd(2453750.5 + 0.8921045614537037037, TimeScale::UT1());
    $this->assertEquals($ut1->toJD(), $utc->toUT1()->toJD(), 'UTC -> UT1', 1e-5);
  }

  /**
   * @covers Marando\AstroDate\AstroDate::toTDB
   */
  public function testToTDB() {
    $tt  = AstroDate::jd(2453750.5 + 0.892855139, TimeScale::TT());
    $tdb = AstroDate::jd(2453750.5 + 0.8928551366736111111, TimeScale::TDB());
    $this->assertEquals($tdb->toJD(), $tt->toTDB()->toJD(), 'TT -> TDB', 1e-8);
  }

  /**
   * @covers Marando\AstroDate\AstroDate::monthName
   */
  public function testMonthName() {
    $tests = [
        'November'  => new AstroDate(2050, 11, 4, 12, 45, 13.54),
        'September' => new AstroDate(10, 9, 14, 1, 46, 16.234),
        'February'  => new AstroDate(1960, 2, 23, 19, 20, 12),
        'January'   => new AstroDate(-560, 1, 7, 4, 12, 15.45),
        'July'      => new AstroDate(1978, 7, 19, 22, 1, 11.124),
        'December'  => new AstroDate(3005, 12, 31, 23, 58, 24.38571),
    ];

    foreach ($tests as $mName => $dt) {
      $this->assertEquals($mName, $dt->monthName(true), 'full');
      $this->assertEquals(substr($mName, 0, 3), $dt->monthName(), 'abr');
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::format
   */
  public function testFormat() {
    $dt    = new AstroDate(1960, 2, 23, 19, 20, 12);
    AstroDate::FORMAT_DEFAULT;
    $tests = [
        'Y M. c T'        => '1960 Feb. 23.8056944 UTC',
        'r Y-M-c T'       => 'A.D. 1960-Feb-23.8056944 UTC',
        'Y-M-d H:i:s.u T' => '1960-Feb-23 19:20:12.000 UTC',
    ];

    foreach ($tests as $format => $str)
      $this->assertEquals($str, $dt->format($format), $format);
  }

  /**
   * @covers Marando\AstroDate\AstroDate::isLeapYear
   */
  public function testIsLeapYear() {
    $years = [
        // y,   leap?
        1700 => false,
        1800 => false,
        1900 => false,
        2100 => false,
        1600 => true,
        2000 => true,
        2400 => true,
    ];

    foreach ($years as $year => $isLeap) {
      $dt = new AstroDate($year, 1, 1);
      $this->assertEquals($isLeap, $dt->isLeapYear(), $year);
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::dayName
   */
  public function testDayName() {
    $tests = [
        'Friday' => new AstroDate(2015, 5, 1),
        'Sunday' => new AstroDate(2015, 10, 25),
        'Friday' => new AstroDate(2020, 8, 14),
    ];

    foreach ($tests as $dName => $dt) {
      $this->assertEquals($dName, $dt->dayName(), 'full');
      $this->assertEquals(substr($dName, 0, 3), $dt->dayName(false), 'abr');
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::diff
   */
  public function testDiff() {
    $tests = [
        [AstroDate::jd(2451545.5), AstroDate::jd(2451555.5), Time::days(10)],
        [AstroDate::jd(2451545.5), AstroDate::jd(2451556.0), Time::days(10.5)],
        [AstroDate::jd(2451545.5), AstroDate::jd(2451595.5), Time::days(50)],
    ];

    foreach ($tests as $t) {
      $dt1  = $t[0];
      $dt2  = $t[1];
      $diff = $t[2];

      $this->assertEquals($diff, $dt1->diff($dt2));
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::toEpoch
   */
  public function testToEpoch() {
    $dt = new AstroDate(2000, 1, 1, 12, 0, 0, null, TimeScale::TT());
    $this->assertEquals((string)Epoch::J2000(), (string)$dt->toEpoch());
  }

  /**
   * @covers Marando\AstroDate\AstroDate::dayOfYear
   */
  public function testDayOfYear() {
    $tests = [
        1   => new AstroDate(2000, 1, 1),
        365 => new AstroDate(2015, 12, 31),
        366 => new AstroDate(2016, 12, 31),
    ];

    foreach ($tests as $dayOfYear => $dt)
      $this->assertEquals($dayOfYear, $dt->dayOfYear(), $dayOfYear);
  }

  /**
   * @covers Marando\AstroDate\AstroDate::sidereal
   */
  public function testSidereal() {
    $tests = [
        [1.754174971870091203, AstroDate::mjd(53736.0, TimeScale::UT1())->sidereal('m'), 1e-9],
        [1.75416613767501915, AstroDate::mjd(53736.0, TimeScale::UT1())->sidereal('a'), 1e-8],
        [1.754174971870091203 + deg2rad(-20), AstroDate::mjd(53736.0,
                    TimeScale::UT1())->sidereal('m', Angle::deg(-20)), 1e-9],
        [1.75416613767501915 + deg2rad(-20), AstroDate::mjd(53736.0,
                    TimeScale::UT1())->sidereal('a', Angle::deg(-20)), 1e-8],
    ];

    foreach ($tests as $t) {
      $expt = $t[0];
      $st   = $t[1];
      $this->assertEquals($expt, $st->toAngle()->rad, null, $t[2]);
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::sinceMidnight
   */
  public function testSinceMidnight() {
    $dt = new AstroDate(2015, 1, 10, 12, 43, 17);
    $this->assertEquals(45797, $dt->sinceMidnight()->sec);
  }

  /**
   * @covers Marando\AstroDate\AstroDate::untilMidnight
   */
  public function testUntilMidnight() {
    $dt = new AstroDate(2015, 1, 10, 12, 43, 17);
    $this->assertEquals(40603, $dt->untilMidnight()->sec);
  }

  /**
   * @covers Marando\AstroDate\AstroDate::__toString
   */
  public function test__toString() {
    $dt    = new AstroDate(1960, 2, 23, 19, 20, 12);
    AstroDate::FORMAT_DEFAULT;
    $tests = [
        'Y M. c T'        => '1960 Feb. 23.8056944 UTC',
        'r Y-M-c T'       => 'A.D. 1960-Feb-23.8056944 UTC',
        'Y-M-d H:i:s.u T' => '1960-Feb-23 19:20:12.000 UTC',
    ];

    foreach ($tests as $format => $str) {
      $dt->format($format);

      // Check that format persists with to string
      $this->assertEquals($str, (string)$dt, $format);
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::solsticeSummer
   */
  public function testSolsticeSummer() {
    $jun = [
        [1996, 21, 2, 24, 46],
        [1997, 21, 8, 20, 59],
        [1998, 21, 14, 3, 38],
        [1999, 21, 19, 50, 11],
        [2000, 21, 1, 48, 46],
        [2001, 21, 7, 38, 48],
        [2002, 21, 13, 25, 29],
        [2003, 21, 19, 11, 32],
        [2004, 21, 0, 57, 57],
        [2005, 21, 6, 47, 12],
    ];

    foreach ($jun as $s) {
      $equinox  = AstroDate::solsticeSummer($s[0]);
      $expected = new AstroDate($s[0], 6, $s[1], $s[2], $s[3], $s[4]);
      $this->assertEquals($expected->toJD(), $equinox->toJD(), $s[0], 1e-3);
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::solsticeWinter
   */
  public function testSolsticeWinter() {
    $dec = [
        [1996, 21, 14, 6, 56],
        [1997, 21, 20, 8, 5],
        [1998, 22, 1, 57, 31],
        [1999, 22, 7, 44, 52],
        [2000, 21, 13, 38, 30],
        [2001, 21, 19, 22, 34],
        [2002, 22, 1, 15, 26],
        [2003, 22, 7, 4, 53],
        [2004, 21, 12, 42, 40],
        [2005, 21, 18, 36, 1],
    ];

    foreach ($dec as $s) {
      $equinox  = AstroDate::solsticeWinter($s[0]);
      $expected = new AstroDate($s[0], 12, $s[1], $s[2], $s[3], $s[4]);
      $this->assertEquals($expected->toJD(), $equinox->toJD(), $s[0], 1e-3);
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::equinoxSpring
   */
  public function testEquinoxSpring() {
    $mar = [
        [1996, 20, 8, 4, 7],
        [1997, 20, 13, 55, 42],
        [1998, 20, 19, 55, 35],
        [1999, 21, 1, 46, 53],
        [2000, 20, 7, 36, 19],
        [2001, 20, 13, 31, 47],
        [2002, 20, 19, 17, 13],
        [2003, 21, 1, 0, 50],
        [2004, 20, 6, 49, 42],
        [2005, 20, 12, 34, 29],
    ];

    foreach ($mar as $e) {
      $equinox  = AstroDate::equinoxSpring($e[0]);
      $expected = new AstroDate($e[0], 3, $e[1], $e[2], $e[3], $e[4]);
      $this->assertEquals($expected->toJD(), $equinox->toJD(), $e[0], 1e-3);
    }
  }

  /**
   * @covers Marando\AstroDate\AstroDate::equinoxAutumn
   */
  public function testEquinoxAutumn() {
    $sep = [
        [1996, 22, 18, 1, 8],
        [1997, 22, 23, 56, 49],
        [1998, 23, 5, 38, 15],
        [1999, 23, 11, 32, 34],
        [2000, 22, 17, 28, 40],
        [2001, 22, 23, 5, 32],
        [2002, 23, 4, 56, 28],
        [2003, 23, 10, 47, 53],
        [2004, 22, 16, 30, 54],
        [2005, 22, 22, 24, 14],
    ];

    foreach ($sep as $e) {
      $equinox  = AstroDate::equinoxAutumn($e[0]);
      $expected = new AstroDate($e[0], 9, $e[1], $e[2], $e[3], $e[4]);
      $this->assertEquals($expected->toJD(), $equinox->toJD(), $e[0], 1e-3);
    }
  }

}
