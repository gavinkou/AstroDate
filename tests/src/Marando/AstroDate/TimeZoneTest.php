<?php

namespace Marando\AstroDate;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-17 at 00:57:02.
 */
class TimeZoneTest extends \PHPUnit_Framework_TestCase {

  /**
   * @covers Marando\AstroDate\TimeZone::UT

   */
  public function testUT() {
    for ($o = -12; $o < 14; $o += 0.5) {
      $tz = TimeZone::UT($o, true);
      $this->assertEquals($o, $tz->offset(2451545.5));
      $this->assertEquals($o + 1, $tz->offset(2451595.5));

      $tz = TimeZone::UT($o, false);
      $this->assertEquals($o, $tz->offset(2451595.5));
    }
  }

  /**
   * @covers Marando\AstroDate\TimeZone::parse
   */
  public function testParse() {
    $this->assertEquals('EST', TimeZone::parse('EST'));

    $tests = [
        'UT-1'     => -1,
        'UT-1:30'  => -1.5,
        'UT+11:30' => 11.5,
        'UT+1130'  => 11.5,
        'UT-0730'  => -7.5,
    ];

    foreach ($tests as $str => $offset) {
      $tz = TimeZone::parse($str)->offset(2451545.5);
      $this->assertEquals($offset, $tz, $str);
    }
  }

  /**
   * @covers Marando\AstroDate\TimeZone::UTC
   * @todo   Implement testUTC().
   */
  public function testUTC() {
    $utc = TimeZone::UTC();

    $this->assertEquals(0, $utc->offset(2451545.5));
    $this->assertEquals('UTC', $utc->name);
    $this->assertEquals(false, $utc->dst);
  }

  /**
   * @covers Marando\AstroDate\TimeZone::offset
   */
  public function testOffset() {
    for ($o = -12; $o < 14; $o += 0.5) {
      $tz = TimeZone::UT($o, true);
      $this->assertEquals($o, $tz->offset(2451545.5));
      $this->assertEquals($o + 1, $tz->offset(2451595.5));

      $tz = TimeZone::UT($o, false);
      $this->assertEquals($o, $tz->offset(2451595.5));
    }
  }

  /**
   * @covers Marando\AstroDate\TimeZone::__toString
   */
  public function test__toString() {
    $mst = TimeZone::parse('mst');
    $this->assertEquals('MST', $mst->name);
  }

}
